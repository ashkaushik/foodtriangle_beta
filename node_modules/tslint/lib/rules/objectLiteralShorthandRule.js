"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
<<<<<<< HEAD
var Lint = require("../lint");
var ts = require("typescript");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
=======
var ts = require("typescript");
var Lint = require("../index");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super.apply(this, arguments) || this;
>>>>>>> origin/foodtriangle_node
    }
    Rule.prototype.apply = function (sourceFile) {
        var objectLiteralShorthandWalker = new ObjectLiteralShorthandWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(objectLiteralShorthandWalker);
    };
<<<<<<< HEAD
    Rule.metadata = {
        ruleName: "object-literal-shorthand",
        description: "Enforces use of ES6 object literal shorthand when possible.",
        options: null,
        optionExamples: ["true"],
        type: "style",
    };
    Rule.LONGHAND_PROPERTY = "Expected property shorthand in object literal.";
    Rule.LONGHAND_METHOD = "Expected method shorthand in object literal.";
    return Rule;
}(Lint.Rules.AbstractRule));
=======
    return Rule;
}(Lint.Rules.AbstractRule));
/* tslint:disable:object-literal-sort-keys */
Rule.metadata = {
    ruleName: "object-literal-shorthand",
    description: "Enforces use of ES6 object literal shorthand when possible.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: ["true"],
    type: "style",
    typescriptOnly: false,
};
/* tslint:enable:object-literal-sort-keys */
Rule.LONGHAND_PROPERTY = "Expected property shorthand in object literal.";
Rule.LONGHAND_METHOD = "Expected method shorthand in object literal.";
>>>>>>> origin/foodtriangle_node
exports.Rule = Rule;
var ObjectLiteralShorthandWalker = (function (_super) {
    __extends(ObjectLiteralShorthandWalker, _super);
    function ObjectLiteralShorthandWalker() {
<<<<<<< HEAD
        _super.apply(this, arguments);
=======
        return _super.apply(this, arguments) || this;
>>>>>>> origin/foodtriangle_node
    }
    ObjectLiteralShorthandWalker.prototype.visitPropertyAssignment = function (node) {
        var name = node.name;
        var value = node.initializer;
        if (name.kind === ts.SyntaxKind.Identifier &&
            value.kind === ts.SyntaxKind.Identifier &&
            name.getText() === value.getText()) {
<<<<<<< HEAD
            this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.LONGHAND_PROPERTY));
=======
            this.addFailureAtNode(node, Rule.LONGHAND_PROPERTY);
>>>>>>> origin/foodtriangle_node
        }
        if (value.kind === ts.SyntaxKind.FunctionExpression) {
            var fnNode = value;
            if (fnNode.name) {
<<<<<<< HEAD
                return;
            }
            this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.LONGHAND_METHOD));
=======
                return; // named function expressions are OK.
            }
            this.addFailureAtNode(node, Rule.LONGHAND_METHOD);
>>>>>>> origin/foodtriangle_node
        }
        _super.prototype.visitPropertyAssignment.call(this, node);
    };
    return ObjectLiteralShorthandWalker;
}(Lint.RuleWalker));
