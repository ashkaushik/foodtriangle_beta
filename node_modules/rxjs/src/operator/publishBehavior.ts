<<<<<<< HEAD
import { Observable } from '../Observable';
=======
>>>>>>> origin/foodtriangle_node
import { BehaviorSubject } from '../BehaviorSubject';
import { multicast } from './multicast';
import { ConnectableObservable } from '../observable/ConnectableObservable';

/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
<<<<<<< HEAD
export function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {
  return multicast.call(this, new BehaviorSubject<T>(value));
}
=======
export function publishBehavior<T>(value: T): ConnectableObservable<T> {
  return multicast.call(this, new BehaviorSubject<T>(value));
}

export interface PublishBehaviorSignature<T> {
  (value: T): ConnectableObservable<T>;
}
>>>>>>> origin/foodtriangle_node
